// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  dob       DateTime?
  college   String?
  course    String?
  skills    String?
  message    String?

   payments  Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}


model Payment {
  id             Int       @id @default(autoincrement())
  orderId        String    @unique         // Cashfree order ID
  paymentId      String?                   // Cashfree payment ID (from verification)
  amount         Float                     // Payment amount
  currency       String    @default("INR") // Currency code
  status         String                    // e.g., "SUCCESS", "PENDING", "FAILED"
  method         String?                   // e.g., "CARD", "UPI", "NETBANKING"
  referenceId    String?                   // Optional reference from Cashfree
  transactionTime DateTime?                // Payment date/time from Cashfree

  // âœ… Relationship with User
  userId         Int
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}


model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  price         Float
  discountPrice Float
  duration      String
  level         String
  language      String
  video         String
  instructorId  Int?
  instructor    Instructor?  @relation(fields: [instructorId], references: [id])
  tags          PriceTag[]   @relation("PriceTags")
  createdAt     DateTime     @default(now())
}

model Instructor {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  bio       String
  courses   Price[]
}

model PriceTag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  prices Price[] @relation("PriceTags")
}
